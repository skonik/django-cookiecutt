"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import sys

from dotenv import load_dotenv
from raven.transport.requests import RequestsHTTPTransport

SOURCE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_DIR = os.path.dirname(SOURCE_DIR)
BASE_DIR = SOURCE_DIR

# Available: prod, stage, test, dev
DJANGO_ENV = os.environ.get('DJANGO_ENV', 'dev')

ENV_DIR_PATH = os.path.join(PROJECT_DIR, "env")
ENV_FILE_PATH = os.path.join(ENV_DIR_PATH, f'.env-{DJANGO_ENV}')

load_dotenv(dotenv_path=ENV_FILE_PATH, verbose=True)

RAVEN_CONFIG = {
    'dsn': os.environ.get('SENTRY_DSN'),
    # Во избежание ошибки ssl.
    'transport': RequestsHTTPTransport,
}


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'FAKE_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', DJANGO_ENV == 'dev')

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party apps
    'raven.contrib.django.raven_compat',
    'rest_framework',
    'django_filters',
    # Dev-apps
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',  # this is default
)

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB', '{{cookiecutter.postgres_db}}'),
        'USER': os.environ.get('POSTGRES_USER', '{{cookiecutter.postgres_user}}'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', '{{cookiecutter.postgres_password}}'),
        'HOST': os.environ.get('POSTGRES_HOST', '{{cookiecutter.postgres_host}}'),
        'PORT': os.environ.get('POSTGRES_PORT', '{{cookiecutter.postgres_port}}'),
        'OPTIONS': {
            'connect_timeout': 3,
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = os.environ.get('LANGUAGE_CODE', 'en-us')

TIME_ZONE = os.environ.get('LANGUAGE_CODE', 'UTC')

USE_I18N = os.environ.get('USE_I18N', True)

USE_L10N = os.environ.get('USE_L10N', True)

USE_TZ = os.environ.get('USE_TZ', True)


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = os.environ.get('STATIC_URL', '/static/')


MEDIA_ROOT = os.path.abspath(os.path.join(BASE_DIR, 'media'))
MEDIA_URL = os.environ.get('MEDIA_URL', '/media/')

REDIS_HOST = os.environ.get('REDIS_HOST', '127.0.0.1')
REDIS_PORT = os.environ.get('REDIS_PORT', '6379')

REDIS_URI = 'redis://{host}:{port}/'.format(
    host=REDIS_HOST,
    port=REDIS_PORT,
)

REDIS_CACHE_DB = os.environ.get('REDIS_CACHE_DB', '2')
REDIS_CACHE_URI = REDIS_URI + REDIS_CACHE_DB

CACHE_DEFAULT_NAME = 'default'

CACHES = {
    CACHE_DEFAULT_NAME: {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_CACHE_URI,
        "OPTIONS": {
            "CONNECTION_POOL_KWARGS": {"max_connections": 100}
        }
    },
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'stream': sys.stderr
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}


# S3 settings
def to_bool(v):
    return str(v).lower() in ('t', 'true', '1', 'y', 'yes')


AWS_S3_ENDPOINT_URL = os.environ.get('AWS_S3_ENDPOINT_URL', 'http://minio.{{cookiecutter.project_slug}}.local:9000/')
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME', 'files')
AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME', 'us-central1')
AWS_ACCESS_KEY = os.environ.get('AWS_ACCESS_KEY', 'FAKE_ACCESS_KEY')
AWS_SECRET_KEY = os.environ.get('AWS_SECRET_KEY', 'FAKE_SECRET_KEY')


CELERYD_MAX_TASKS_PER_CHILD = 1
S3_USE_SIGV4 = True
AWS_QUERYSTRING_AUTH = False
AWS_AUTO_CREATE_BUCKET = to_bool(os.environ.get('AWS_AUTO_CREATE_BUCKET'))
AWS_DEFAULT_ACL = None
AWS_BUCKET_ACL = 'public-read'

if to_bool(os.environ.get('DJANGO_USE_S3_STORAGE', False)):
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'auth.backend.JWTBackend',
    ],
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']
}

# AUTH_USER_MODEL = 'users.User'
EMAIL_BACKEND = 'djcelery_email.backends.CeleryEmailBackend'
